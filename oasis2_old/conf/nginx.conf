#user  nobody;
worker_processes  1;

error_log  /var/log/nginx/logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    default_type  application/octet-stream;
    include       mime.types;
    resolver 127.0.0.1;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;
    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
    gzip_min_length 1k;
    # # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
    gzip_comp_level 2;
    # # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    # # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;

    server {
        listen       28291;
        server_name  kes-62ad66ea-gn-38b74120-data-1.ksc.com;

        #charset koi8-r;

        if ($http_referer ~ ^.*kes_auto_login=1([^\&]*)) {
            set $last_authorization "Basic a2VzJTNBa2Vz";
        }

        if ($http_referer ~ ^.*khbase_auto_login=1([^\&]*)) {
            set $last_authorization "Basic a2VzJTNBa2Vz";
        }

        if ($http_cookie ~ ^.*last_logout=([^\n=\;\"]*)) {
            set $last_logout $1;
        }

        set $loop_string "$last_logout-$time_local";

        if ($loop_string ~ "^(\d+/[^/]+/\d+:\d+:\d+:\d)[^-]+-\1") {
            set $last_authorization "";
        }

        if ($http_authorization ~ ^$) {
            set $http_authorization $last_authorization;
        }

        #access_log  logs/host.access.log  main;
        if ($http_cookie ~ ^.*last_service=([^:/\n=\;\"]*:\d+)) {
            set $last_service $1;
        }
        if ($http_cookie ~ ^.*last_token=([^/\n=\;\"]*)) {
            set $last_token $1;
        }
        if ($http_cookie ~ ^.*last_exp=([\d]+)) {
            set $last_exp $1;
        }
        if ($http_referer ~ ^.*kes_service=([^\&]*)) {
            set $last_service $1;
        }

        if ($http_referer ~ ^.*khbase_service=([^\&]*)) {
            set $last_service $1;
        }

        if ($http_referer ~ ^.*kes_token=([^\&]*)) {
            set $last_token $1;
        }

        if ($http_referer ~ ^.*khbase_token=([^\&]*)) {
            set $last_token $1;
        }

        if ($http_referer ~ ^.*kes_exp=([^\&]*)) {
            set $last_exp $1;
        }

        if ($http_referer ~ ^.*khbase_exp=([^\&]*)) {
            set $last_exp $1;
        }
        if ($request_uri !~ ^(/[^\?]*)[\?]kes_service|khbase_service) {
            set $arg_service $last_service;
            set $arg_token $last_token;
            set $arg_exp $last_exp;
        }
        if ($request_uri !~ ^(/[^\?]*)[\?]kes_service.*kes_token.*kes_exp.*|khbase_service.*khbase_token.*khbase_exp.*) {
            set $arg_token $last_token;
            set $arg_exp $last_exp;
        }

        if ($arg_service ~ ^127.0.0.1(.*)) {
            set $arg_service $server_name$1;
        }

        if ($request_uri ~ ^(/[^\?]*)[\?]){
            set $request_path $1;
        }

        # add for kibana
        if ($request_uri ~ ^(/app/kibana\?kes_service.*)$) {
            rewrite ^(.*)$ /subfilter/$1 break;
        }

        if ($request_uri ~ ^(/app/kibana.*)\?(.*)) {
            rewrite ^(.*) http://$http_host$1?kes_service=$arg_service&kes_token=$arg_token&kes_exp=$arg_exp&$2; break;
        }

        if ($request_uri ~ ^(/app/kibana.*)) {
            rewrite ^(.*) http://$http_host$1?kes_service=$arg_service&kes_token=$arg_token&kes_exp=$arg_exp; break;
        }
        # end for kibana
        #

        if ($request_uri ~ ^.*khbase_service=([^\&]*)) {
            set $arg_service $1;
        }

        if ($request_uri ~ ^.*khbase_token=([^\&]*)) {
            set $arg_token $1;
        }

        if ($request_uri ~ ^.*khbase_exp=([^\&]*)) {
            set $arg_exp $1;
        }


        if ($request_uri ~ ^.*kes_service=([^\&]*)) {
                set $arg_service $1;
        }

        if ($request_uri ~ ^.*kes_token=([^\&]*)) {
                set $arg_token $1;
        }

        if ($request_uri ~ ^.*kes_exp=([^\&]*)) {
                set $arg_exp $1;
            }

        location / {
            secure_link $arg_token,$arg_exp;
            secure_link_md5 62ad66ea-f113-40ce-aacc-5bc81943b20c$arg_exp;
            if ( $secure_link = "" ) {
                return 402;
            }
            if ( $secure_link = "0" ) {
                return 405;
            }

            proxy_pass http://$arg_service;

            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/(.*)\?(.*) http://$http_host/$6?$7;
            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/([^?]*) http://$http_host/$6?kes_service=$arg_service&kes_token=$arg_token&kes_exp=$arg_exp;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*)\?(.*) http://$http_host/$2?kes_service=$1&kes_token=$arg_token&kes_exp=$arg_exp&$3;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*) http://$http_host/$2?kes_service=$1&kes_token=$arg_token&kes_exp=$arg_exp;
            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/([^?]*) http://$http_host/$6?khbase_service=$arg_service&khbase_token=$arg_token&khbase_exp=$arg_exp;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*)\?(.*) http://$http_host/$2?khbase_service=$1&khbase_token=$arg_token&khbase_exp=$arg_exp&$3;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*) http://$http_host/$2?khbase_service=$1&khbase_token=$arg_token&khbase_exp=$arg_exp;
            proxy_set_header Host $host;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            client_max_body_size 10m;
            client_body_buffer_size 128k;
            proxy_connect_timeout 900;
            proxy_send_timeout 900;
            proxy_read_timeout 900;
            proxy_buffers 32 4k;
            proxy_intercept_errors on;


            add_header Set-Cookie "last_service=$arg_service; Path=/";
            add_header Set-Cookie "last_token=$arg_token; Path=/";
            add_header Set-Cookie "last_exp=$arg_exp; Path=/";
            if ($request_uri ~ ^/api/v1/logout) {
                add_header Set-Cookie "last_logout=$time_local; Path=/";
            }

        }

        location ~ ^/subfilter {
            if ($request_uri ~ ^.*kes_service=([^\&]*)) {
                set $arg_service $1;
            }

            if ($request_uri ~ ^.*kes_token=([^\&]*)) {
                set $arg_token $1;
            }

            if ($request_uri ~ ^.*kes_exp=([^\&]*)) {
                set $arg_exp $1;
            }

            proxy_pass http://$arg_service$request_uri;

            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/(.*)\?(.*) http://$http_host/$6?$7;
            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/([^?]*) http://$http_host/$6?kes_service=$arg_service&kes_token=$arg_token&kes_exp=$arg_exp;
            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/([^?]*) http://$http_host/$6?khbase_service=$arg_service&khbase_token=$arg_token&khbase_exp=$arg_exp;
            proxy_redirect ~^http://((\d)+.(\d)+.(\d)+.(\d)+)/(.*) http://$http_host/$6;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*)\?(.*) http://$http_host/$2?kes_service=$1&kes_token=$arg_token&kes_exp=$arg_exp&$3;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*) http://$http_host/$2?kes_service=$1&kes_token=$arg_token&kes_exp=$arg_exp;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*)\?(.*) http://$http_host/$2?khbase_service=$1&khbase_token=$arg_token&kes_exp=$arg_exp&$3;
            proxy_redirect ~^http://(.*:[\d]+)/([^?]*) http://$http_host/$2?khbase_service=$1&khbase_token=$arg_token&khbase_exp=$arg_exp;

            proxy_set_header Host $host;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            set $xheader $http_Accept_Encoding;
            if ($request_uri ~ ^/proxy/application_\d+_\d+/executors) {
                set $xheader "";
            }
            proxy_set_header Accept-Encoding $xheader;
            client_max_body_size 10m;
            client_body_buffer_size 128k;
            proxy_connect_timeout 900;
            proxy_send_timeout 900;
            proxy_read_timeout 900;
            proxy_buffers 32 4k;
            proxy_intercept_errors on;

            # subs_filter_types *;
            # subs_filter 'href=(\"|\')http:' 'href=$1' ir;
            # subs_filter 'href=(\"|\')([\.\w\?]+)([^\n> ]*)' 'href=$1//$arg_service$request_path$2$3' ir;
            # subs_filter 'href=(\"|\')/(\w+)' 'href=$1//$arg_service/$2' ir;
            # subs_filter 'href=(\"|\')([\w:]*//)([^:/\n]*:\d+)(.*)\?([^\n<> ]*)(\"|\')' 'href=$1$2$http_host$4?kes_service=$3&kes_token=$arg_token&kes_exp=$arg_exp&$5$6' ir;
            # subs_filter 'href=(\"|\')([\w:]*//)([^:/\n]*:\d+)([^?\n<> ]*)(\"|\')' 'href=$1$2$http_host$4?kes_service=$3&kes_token=$arg_token&kes_exp=$arg_exp$5' ir;

            # subs_filter 'orkerLogLink(\"|\'):\"([\w:]*\\\/\\\/)([^:/\n]*:\d+)([^\n<>\"]*)\?([^\n<>\" ]*)(\"|\')' 'orkerLogLink$1:"$2$http_host$4?kes_service=$3&kes_token=$arg_token&kes_exp=$arg_exp&$5$6' ir;

            # subs_filter 'href=(\"|\')([\w:]*//)([^:/\n]*:\d+)(.*)\?([^\n<> ]*)(\"|\')' 'href=$1$2$http_host$4?khbase_service=$3&khbase_token=$arg_token&khbase_exp=$arg_exp&$5$6' ir;
            # subs_filter 'href=(\"|\')([\w:]*//)([^:/\n]*:\d+)([^?\n<> ]*)(\"|\')' 'href=$1$2$http_host$4?khbase_service=$3&khbase_token=$arg_token&khbase_exp=$arg_exp$5' ir;
            # subs_filter 'orkerLogLink(\"|\'):\"([\w:]*\\\/\\\/)([^:/\n]*:\d+)([^\n<>\"]*)\?([^\n<>\" ]*)(\"|\')' 'orkerLogLink$1:"$2$http_host$4?khbase_service=$3&khbase_token=$arg_token&kes_exp=$arg_exp&$5$6' ir;

            add_header Set-Cookie "last_service=$arg_service; Path=/";
            add_header Set-Cookie "last_token=$arg_token; Path=/";
            add_header Set-Cookie "last_exp=$arg_exp; Path=/";
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
